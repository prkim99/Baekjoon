#include<iostream>
#include<vector>
#include<stack>
#include<cstring>
using namespace std;
vector<int> graph[20001];
int group[20001]={0,};
bool dfs(int node) {
	stack<int> s;
	s.push(node);
	group[node] = 1;
	while (!s.empty()) {
		node = s.top();
		s.pop();
		for (int i = 0; i < graph[node].size(); i++) {
			int cn = graph[node][i];
			if (group[cn] != 0) {
				if (group[node] == group[cn]) {
					return false;
				}
			}
			else {
				if (group[node] == 1) group[cn] = 2;
				else group[cn] = 1;
				s.push(cn);
			}
		}
	}
	return true;
}

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0); cout.tie(0);

	int t, tt = 0;
	cin >> t;
	while (t>tt) {
		int n, e;
		cin >> n >> e;
		int u, v;
		for (int i = 0; i < e; i++) {
			cin >> u >> v;
			graph[u].push_back(v);
			graph[v].push_back(u);
		}
		bool flag = true;
		for (int i = 1; i <= n; i++) {
			if (group[i] == 0) {
				if (!dfs(i)) {
					flag = false;
					break;
				}
			}
		}

		if (flag) cout << "YES\n";
		else cout << "NO\n";
		for (int i = 1; i <= n; i++) {
			graph[i].clear();
		}
		memset(group, 0, sizeof(group));
		tt++;
	}

	return 0;
}
